{
  "hash": "d3297e4a8f88474f4e5436e800f407e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple models on one API\"\ndate: \"9/10/2022\"\ndescription: \"Deploying multiple models to one VetiverAPI.\"\ncategories: [r, vetiver, mlops]\nimage: beardown.png\n---\n\n\n\nAs someone who identifies as a Chicago Bears fan for life, I have some strong ~~superstitions~~ rituals on gameday. In a completely hypothetical example, I might have one model that I feel must be used when the Bears have a home game, and a different model for any other day. (They always win when I use this model to write blog posts on game days, and I fear a replay of the 2016 season when our win-loss ratio was 3-13 if I change my ways.)\n\n**Oftentimes you need to deploy more than one model.** Even if the fate of your favorite NFL team isn't depending upon your models' locations, **it's important to understand where these models should be living.** tldr;\n\n1. Input data is the same -> use one API\n2. Input data is not the same -> use multiple APIs\n\n(These are not definitive rules. A lot of this is dependent upon architecture, how your deployment is set up, what works best for your organization, etc. Also, vetiver allows you to break both of these rules!)\n\nIf your models are unrelated and the input data is different, you probably want to put them on different APIs. However, if the input data is the same for multiple different models, it might make sense to deploy them on the same API, but at different endpoints. \n\nFor our Chicago train ridership data, we ALWAYS want to predict ridership from the same parameters every time. However, if the data indicates it was a home game for the Chicago Bears, we want to use our lucky model.\n\nLet's start by loading some data and use `tidymodels` to put all our preprocessing in one recipe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(Chicago)\n\nchicago_small <- Chicago %>% slice(1:730) # two years of data\n\nchicago_rec <-\n  recipe(ridership ~ ., data = Chicago) %>%\n  step_date(date) %>%\n  step_holiday(date, keep_original_cols = FALSE) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_zv(all_predictors()) %>%\n  step_normalize(all_predictors()) %>%\n  step_pca(all_of(stations), num_comp = 4)\n```\n:::\n\n\n\nWe can then use tidymodels to make multiple different models quickly. Notice that I am actually putting my preprocessing recipe in the recipe with my model. This is intentional, and best practice for modeling.\n\n:::{.callout-important}\nFeature engineering is part of your model workflow. You should be packaging this up with your model and deploying it as part of your model workflow. In Python, this involves using something like [scikit learn Pipelines](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html). In R, this involves using something like [tidymodels workflows](https://workflows.tidymodels.org/).\n\n![](https://www.tmwr.org/premade/proper-workflow.svg){fig-alt=\"Flowchart of data and predictors feeding into the modeling workflow, which is comprised of Principal Component Analysis AND least squares estimation. Model workflow feeds into fitted model.\"}\n:::\n\nBuild a few models for home games (support vectors for extra support at home):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_model <-\n  svm_linear() %>%\n  set_engine(\"LiblineaR\") %>%\n  set_mode(\"regression\")\n\nhome_game_model <-\n  workflow(chicago_rec, tree_model) %>%\n  fit(chicago_small)\n```\n:::\n\n\n\nAnd not home games:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_model <-\n  linear_reg() %>%\n  set_engine(\"lm\")\n\nnot_home_game_model <-\n  workflow(chicago_rec, tree_model) %>% \n  fit(chicago_small)\n```\n:::\n\n\n\n\nNext, I will make some deployable model objects, or `vetiver_model`, with the `vetiver` package. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vetiver)\n\nhome <- vetiver_model(home_game_model, \"home\")\nnot_home <- vetiver_model(not_home_game_model, \"not_home\")\n```\n:::\n\n\n\nNormally we would be iterating through models and possibly [versioning](https://vetiver.rstudio.com/get-started/version.html#store-and-version-your-model) them as well, but let's skip that step and go right to deployment.\n\nI'll deploy these two models on ONE plumber API by using a combination of `vetiver_pr_post()` and `vetiver_pr_docs()` along with the `path` argument. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plumber)\n\npr() %>% \n  vetiver_pr_post(home, path = \"/home_game\") %>% \n  vetiver_pr_docs(home) %>% \n  vetiver_pr_post(not_home, path = \"/not_home_game\") %>% \n  vetiver_pr_docs(not_home) %>% \n  pr_run()\n```\n:::\n\n\n\nNow, to make predictions, I will route data to each endpoint respectively. To do this on your own computer, you will have to run the above commands as [background job](https://solutions.rstudio.com/r/jobs/) (or [deploy it with docker.](https://vetiver.rstudio.com/learn-more/deploy-with-docker.html))\n\nWe can make predictions at each endpoint with data. Of course this can be as complex or simple as you desire, but here's the meat-and-potatoes of it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhome_endpoint <- vetiver_endpoint('http://127.0.0.1:5331/home_game')\n\nhome_data <- Chicago %>%\n  filter(Bears_Home == 1) %>%\n  tail(5)\n\npredict(home_endpoint, home_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_home_endpoint <- vetiver_endpoint('http://127.0.0.1:5331/not_home_game')\n\nnot_home_data <- Chicago %>%\n  filter(Bears_Home == 0) %>%\n  tail(5)\n\npredict(not_home_endpoint, not_home_data)\n```\n:::\n\n\n\n\nWe have now created an API with multiple models at various endpoints, and successfully interacted with them! This is a great start to making more complex MLOps workflows with vetiver. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}