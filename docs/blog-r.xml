<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>isabel zimmerman</title>
<link>https://isabelizimm.me/blog.html#category=r</link>
<atom:link href="https://isabelizimm.me/blog-r.xml" rel="self" type="application/rss+xml"/>
<description>Isabel Zimmerman&#39;s personal blog</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Fri, 05 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>So, you want to learn about MLOps</title>
  <link>https://isabelizimm.me/posts/2024-04-05_learn-mlops/</link>
  <description><![CDATA[ 




<p>If you’re interested in learning more about MLOps, I’ve culminated a list of some of my favorite resources to learn about MLOps as a whole as well as specific MLOps practices.</p>
<section id="starting-out" class="level2">
<h2 class="anchored" data-anchor-id="starting-out">Starting out</h2>
<p>If you’re wanting to invest a books-length amount of time into learning about MLOps, <a href="https://www.oreilly.com/library/view/designing-machine-learning/9781098107956/"><em>Designing Machine Learning Systems</em> by Chip Huyen</a> is my number one recommendation. This book has information for the whole machine learning lifecycle from building a model to building a system for that model to live in. If you’re mostly interested in the MLOps parts, I recommend starting with chapters 2, 7, 8, 9, and 11.</p>
<p><a href="https://ml-ops.org/content/mlops-principles">MLOps Principles</a> is a culmination of a lot of the most-cited MLOps literature, so if you’re wanting a starting point with lots of side quest opportunities, this is a good place to start. I particularly liked the idea of “Continuous X”; this extends the idea of CI/CD (continuous integration/continuous delivery) to include Continuous Training and Continuous Delivery. It highlights out an important piece of MLOps: it’s never finished.</p>
<p>If you’re interested in learning what “real” MLOps people do, <a href="https://arxiv.org/pdf/2209.09125.pdf">“Operationalizing Machine Learning: An Interview Study” by Shreya Shankar et al</a> is <strong>the article to read.</strong> This piece feels foundational to me. There is important discussion about the fundamental differences between building models and building traditional software, why not every model gets deployed, and much much more. It’s a digestable paper, and I highly recommend reading this one all the way through.</p>
<p>And, I can’t write this without giving a personal plug: I’ve given a number of MLOps talks, which you can view at the “Talks” tab on this page! A good “starting point” talk of mine is <a href="https://www.youtube.com/watch?v=hzrFU5-_9-E">Demystifying MLOps</a>, which I presented at <code>rstudio::conf(2022)</code>.</p>
</section>
<section id="special-topics" class="level2">
<h2 class="anchored" data-anchor-id="special-topics">Special topics</h2>
<p>Once you have a bit of MLOps context in your mind, there are lots of avenues to explore! If you’re interested in the pain points of <a href="https://www.youtube.com/watch?v=hBMHohkRgAA"><em>How ML Breaks: A Decade of Outages for One Large ML Pipeline</em> by Papasian and Underwood</a>. This video walks through all the ways the ML pipeline at Google has broken; breakages are categorized in numerous ways, but one particularly interesting one is ML failures/Non-ML failures. Spoiler alert: most failures were not machine learning failures.</p>
<p>With a model in production, you’ll want to monitor it. <a href="https://www.youtube.com/watch?v=LGXi2R70pVc"><em>Reliable Maintenance of Machine Learning Models</em> by Julia Silge</a> is a great overview of why you should be monitoring models. This talk outlines what “performing well” means to different stakeholders of model systems and explains the multiple types of drift that can happen once your model is out in the wild.</p>
<p>If you have implemented MLOps practices, <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/aad9f93b86b7addfea4c419b9100c6cdd26cacea.pdf">“The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction” by E.Breck et al.&nbsp;2017</a> is a must read. It shows and rates a practical progression of machine learning systems, which is often <em>not</em> adding versioning systems -&gt; adding model deployment -&gt; starting to monitor models; rather, it usually follows the pattern of systems are not implemented -&gt; systems are implemented manually -&gt; systems are run automatically.</p>
<p>Event streaming won’t be a required skill for all people who are using MLOps practices. However, if you want to learn about it, <a href="https://www.gentlydownthe.stream/"><em>Gently Down the Stream</em> by Mitch Seymour</a> is a children’s book which also happens to be the best explanation of Kafka I have ever read. Plus it is an adorable, digestible, maybe 5-minute read.</p>
<p>Finally– if you’ve devoured this list and are still hungry for more, <a href="https://huyenchip.com/mlops/">MLOps guide by Chip Huyen</a> is a secondary curated list of MLOps content that I have gone through and absolutely adore.</p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>python</category>
  <category>r</category>
  <guid>https://isabelizimm.me/posts/2024-04-05_learn-mlops/</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-04-05_learn-mlops/maple_smile.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>A year in review: vetiver</title>
  <link>https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/</link>
  <description><![CDATA[ 




<p>It has been almost a year of vetiver! Vetiver for Python (0.1.8) and R (0.1.8) seeks to provide fluent tooling to version, share, deploy, and monitor a trained model.</p>
<ul>
<li>Where vetiver is now</li>
<li>Where vetiver is going</li>
<li>Where vetiver is <em>not</em> going</li>
</ul>
<section id="the-journey" class="level2">
<h2 class="anchored" data-anchor-id="the-journey">The journey</h2>
<p>Recently, the team dedicated a month to reading about the world of MLOps, as it is today. We all read the fantastic book <a href="https://www.oreilly.com/library/view/designing-machine-learning/9781098107956/">Designing Machine Learning Systems</a> by Chip Huyen and split up numerous other academic articles and web content between ourselves. The world of machine learning operations moves fast, and we wanted to ensure the choices we had made early on (eg, focusing on versioning, deploying, and monitoring) would serve data practitioners best.</p>
<p>After reading <em>many</em> different definitions of MLOps, the one we found most useful is: “a set of practices to deploy and maintain machine learning models in production reliably and efficiently.” While not every MLOps practice is applicable at scale for every team, these best practices can elevate any size of project.</p>
<p>MLOps applies the same basic principles as DevOps (development operations) in a specialized machine learning context. One common point of tension in MLOps is that data science is highly experimental and iterative compared to general purpose software delivery, but deploying to a production environment still requires reliable software engineering delivery practices. To help ease this pain point, APIs are commonly used to deploy models due to their stability and simplicity. APIs can be tested, and they act nearly identically in every architecture. This allows for software engineering practices to be applied to APIs. They have a straightforward architecture to configure and update, giving data scientists agility to retrain and update models as needed.</p>
<p>Tools labeled as “MLOps frameworks” have a broad scope. Tasks generally fall into one of a few different categories:</p>
<ul>
<li>Orchestration or pipelines</li>
<li>Experiment tracking</li>
<li>Model versioning</li>
<li>Model deployment</li>
<li>Model monitoring</li>
</ul>
<p>Vetiver spans a few of these tasks, but is not a tool built for orchestration or experiment tracking. Rather, Vetiver focuses on the practices of versioning, deploying, and monitoring and will continue building support for these tasks.</p>
</section>
<section id="where-vetiver-is-now" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-now">Where vetiver is now</h2>
<p>Vetiver also leverages the versioning and sharing capabilities of the pins package in Python and R. This package brings a straightforward way to read and write objects to different locations and allows for certain data types (namely csv and arrow files) to be passed between the Python and R language fluently.</p>
<p>Within vetiver itself, the use of <code>VetiverModel</code>, <code>VetiverAPI</code>, and monitoring helper functions gives practitioners lightweight support to bring their models to many different locations via one line deployment functions (for <a href="https://posit.co/products/enterprise/connect/">Posit Connect</a>) or Dockerfile generation (for <a href="https://vetiver.rstudio.com/learn-more/deploy-with-docker.html">numerous on-prem or public cloud locations</a>). These objects are able to be extended to support more advanced use cases. Vetiver is able to quickly prototype REST APIs, and then scale these prototypes safely.</p>
</section>
<section id="where-vetiver-is-going" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-going">Where vetiver is going</h2>
<p>Fluent monitoring practices is crucial for a robust deployment. While the CI/CD in monitoring can be infrastructure dependent, it is important to close the loop between model prediction, monitoring, and retraining. Feedback loops are a place where bias in models can aggregate undetected. Any continuous monitoring support necessitates careful thought on how to uncover model (un)fairness.</p>
<p>The composability of vetiver with other projects, such as MLFlow or Metaflow, is needed to allow practitioners to build an MLOps framework that is flexible and meets the need of their team. Composability in this sense also includes platform agnosticism for public clouds such as Amazon Web Services, Azure, and Google Cloud Platform. Currently, generic Dockerfiles exist that can be hosted on these platforms, but extended documentation is needed for specific workflows.</p>
</section>
<section id="where-vetiver-is-not-going" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-not-going">Where vetiver is <em>not</em> going</h2>
<p>DAG creation is currently out of scope of vetiver. If this is to be supported later on, it would likely end up in a new tool for maximum flexibility.</p>
<p>Support for automatic creation of model registries is not currently short-term plan. However, using pins and Quarto together can create a beautiful document to track your deployed objects. If you’re interested in this topic, this demo shows how to use <a href="https://colorado.rstudio.com/rsc/bike-predict-r-dashboard/document.html">pins + Quarto to track your models.</a></p>
<p>In all, we have learned so much from you all this year, and look forward to another year of helping data scientists bring models into production!</p>


</section>

 ]]></description>
  <category>vetiver</category>
  <category>mlops</category>
  <category>r</category>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/</guid>
  <pubDate>Tue, 25 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title>Multiple models on one API</title>
  <link>https://isabelizimm.me/posts/2022-09-10_multiple-models-api/</link>
  <description><![CDATA[ 




<p>As someone who identifies as a Chicago Bears fan for life, I have some strong <del>superstitions</del> rituals on gameday. In a completely hypothetical example, I might have one model that I feel must be used when the Bears have a home game, and a different model for any other day. (They always win when I use this model to write blog posts on game days, and I fear a replay of the 2016 season when our win-loss ratio was 3-13 if I change my ways.)</p>
<p><strong>Oftentimes you need to deploy more than one model.</strong> Even if the fate of your favorite NFL team isn’t depending upon your models’ locations, <strong>it’s important to understand where these models should be living.</strong> tldr;</p>
<ol type="1">
<li>Input data is the same -&gt; use one API</li>
<li>Input data is not the same -&gt; use multiple APIs</li>
</ol>
<p>(These are not definitive rules. A lot of this is dependent upon architecture, how your deployment is set up, what works best for your organization, etc. Also, vetiver allows you to break both of these rules!)</p>
<p>If your models are unrelated and the input data is different, you probably want to put them on different APIs. However, if the input data is the same for multiple different models, it might make sense to deploy them on the same API, but at different endpoints.</p>
<p>For our Chicago train ridership data, we ALWAYS want to predict ridership from the same parameters every time. However, if the data indicates it was a home game for the Chicago Bears, we want to use our lucky model.</p>
<p>Let’s start by loading some data and use <code>tidymodels</code> to put all our preprocessing in one recipe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(Chicago)</span>
<span id="cb1-3"></span>
<span id="cb1-4">chicago_small <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">730</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two years of data</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">chicago_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(ridership <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> Chicago) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_date</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_holiday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_original_cols =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_dummy</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_zv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_normalize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_pca</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(stations), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_comp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<p>We can then use tidymodels to make multiple different models quickly. Notice that I am actually putting my preprocessing recipe in the recipe with my model. This is intentional, and best practice for modeling.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Feature engineering is part of your model workflow. You should be packaging this up with your model and deploying it as part of your model workflow. In Python, this involves using something like <a href="https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html">scikit learn Pipelines</a>. In R, this involves using something like <a href="https://workflows.tidymodels.org/">tidymodels workflows</a>.</p>
<p><img src="https://www.tmwr.org/premade/proper-workflow.svg" class="img-fluid" alt="Flowchart of data and predictors feeding into the modeling workflow, which is comprised of Principal Component Analysis AND least squares estimation. Model workflow feeds into fitted model."></p>
</div>
</div>
<p>Build a few models for home games (support vectors for extra support at home):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tree_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svm_linear</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LiblineaR"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regression"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">home_game_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>(chicago_rec, tree_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(chicago_small)</span></code></pre></div>
</div>
<p>And not home games:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">linear_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">not_home_game_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>(chicago_rec, tree_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(chicago_small)</span></code></pre></div>
</div>
<p>Next, I will make some deployable model objects, or <code>vetiver_model</code>, with the <code>vetiver</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vetiver)</span>
<span id="cb4-2"></span>
<span id="cb4-3">home <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_model</span>(home_game_model, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>)</span>
<span id="cb4-4">not_home <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_model</span>(not_home_game_model, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not_home"</span>)</span></code></pre></div>
</div>
<p>Normally we would be iterating through models and possibly <a href="https://vetiver.rstudio.com/get-started/version.html#store-and-version-your-model">versioning</a> them as well, but let’s skip that step and go right to deployment.</p>
<p>I’ll deploy these two models on ONE plumber API by using a combination of <code>vetiver_pr_post()</code> and <code>vetiver_pr_docs()</code> along with the <code>path</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(plumber)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_post</span>(home, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home_game"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_docs</span>(home) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_post</span>(not_home, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/not_home_game"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_docs</span>(not_home) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr_run</span>()</span></code></pre></div>
</div>
<p>Now, to make predictions, I will route data to each endpoint respectively. To do this on your own computer, you will have to run the above commands as <a href="https://solutions.rstudio.com/r/jobs/">background job</a> (or <a href="https://vetiver.rstudio.com/learn-more/deploy-with-docker.html">deploy it with docker.</a>)</p>
<p>We can make predictions at each endpoint with data. Of course this can be as complex or simple as you desire, but here’s the meat-and-potatoes of it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">home_endpoint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_endpoint</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://127.0.0.1:5331/home_game'</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">home_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Bears_Home <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(home_endpoint, home_data)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">not_home_endpoint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_endpoint</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://127.0.0.1:5331/not_home_game'</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">not_home_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Bears_Home <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(not_home_endpoint, not_home_data)</span></code></pre></div>
</div>
<p>We have now created an API with multiple models at various endpoints, and successfully interacted with them! This is a great start to making more complex MLOps workflows with vetiver.</p>



 ]]></description>
  <category>r</category>
  <category>vetiver</category>
  <category>mlops</category>
  <guid>https://isabelizimm.me/posts/2022-09-10_multiple-models-api/</guid>
  <pubDate>Sat, 10 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-09-10_multiple-models-api/beardown.png" medium="image" type="image/png" height="108" width="144"/>
</item>
</channel>
</rss>
