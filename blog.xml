<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>isabel zimmerman</title>
<link>https://isabelizimm.me/blog.html</link>
<atom:link href="https://isabelizimm.me/blog.xml" rel="self" type="application/rss+xml"/>
<description>Isabel Zimmerman&#39;s personal blog</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Mon, 20 Jan 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>Cookie reviews: chocolate chocolate chip</title>
  <link>https://isabelizimm.me/posts/2025-01-20_cookie-recipe-cc/</link>
  <description><![CDATA[ 




<p>4.5/5 ⭐. This is my own recipe, so I am unashamedly bias. I <em>love</em> anything chocolatey. This lovely because 1) I almost always have all the ingredients on hand and 2) it gives you all the gooey goodness of a brownie in about 15 minutes flat. The measurements are a bit odd (and I have mismeasured what 2/3c of butter is more times than I’d like to admit). Despite its funky ratios, it is my go-to.</p>
<pre><code>Makes about 10 cookies. 

2/3c butter, softened
1/2 + 1/3c white sugar
1 teaspoon vanilla
1 egg
1/2 teaspoon salt
1/2 cup cocoa powder
1/2 teaspoon baking soda
1 cup flour
3/4 cup chocolate chips

0. Preheat oven to 350F.
1. Mix butter and sugar until fluffy.
2. Stir in vanilla and egg until combined.
3. Add salt, cocoa powder, baking soda, flour. Stir until combined.
4. Fold in chocolate chips.
5. Bake in oven for 8-ish mins. They will crack on top, but should still be soft.</code></pre>



 ]]></description>
  <category>cookies</category>
  <guid>https://isabelizimm.me/posts/2025-01-20_cookie-recipe-cc/</guid>
  <pubDate>Mon, 20 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotnine plot contest</title>
  <link>https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/</link>
  <description><![CDATA[ 




<p><a href="https://plotnine.org/">Plotnine</a> is running a plot contest! <a href="https://github.com/has2k1/plotnine/discussions/788">And it is not too late to enter</a>, submissions close July 12!</p>
<p>For my submission<sup>1</sup>, I’ll start with reading in <a href="">cheese data from TidyTuesday</a>, as well as a csv of longitudes and latitudes of different countries.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geodatasets</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotnine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">cheese <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-06-04/cheeses.csv"</span></span>
<span id="cb1-11">)</span>
<span id="cb1-12">country_lat_long <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./world_country_and_usa_states_latitude_and_longitude_values.csv"</span></span>
<span id="cb1-14">)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>]]</span></code></pre></div>
</div>
<p>Next, some data manipulation to set us up with tidy data to plot.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb2-2">cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb2-3">cheese <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>).explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>)</span>
<span id="cb2-4">mode_milk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>].agg(pd.Series.mode).reset_index()</span>
<span id="cb2-5">country_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>).explode().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip().value_counts().reset_index()</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">cheese_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> country_value.merge(country_lat_long, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>)</span>
<span id="cb3-2">cheese_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese_plot.merge(mode_milk, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>).explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>)</span>
<span id="cb3-3">top_countries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese_plot.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).replace([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United Kingdom"</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.K."</span>]).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>We also will use <a href="https://geopandas.org/en/v1.0.0/index.html"><code>geopandas</code></a> in order to generate the map itself.</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">geodatasets.fetch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"naturalearth land"</span>)</span>
<span id="cb4-2">world_lowres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geopandas.read_file(</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/geopandas/geopandas/raw/v0.9.0/geopandas/datasets/naturalearth_lowres/naturalearth_lowres.shp"</span></span>
<span id="cb4-4">)</span>
<span id="cb4-5">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geopandas.read_file(geodatasets.get_path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"naturalearth land"</span>))</span></code></pre></div>
</div>
<p>Finally, let’s use plotnine to put it all together! The main pieces in play are four <code>geoms_</code> and then some extra layers to make the plot more readable. A <code>geom_map</code> to generate the map, <code>geom_point</code> to place each circle depicting number and type of cheeses, and two <code>geom_text</code> elements for the country name and number of cheeses. The <code>scale_size</code> edits the size of the points in <code>geom_point</code> and <code>scale_colour_brewer</code> edits the colors of these points. Finally, the theme is a combination of <code>theme_void</code> and custom <code>theme</code> and <code>guides</code> elements.</p>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">(</span>
<span id="cb5-2">    ggplot()</span>
<span id="cb5-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_map(world_lowres, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#474c53"</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d0d0d0"</span>, stroke<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)</span>
<span id="cb5-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_point(</span>
<span id="cb5-5">        data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cheese_plot,</span>
<span id="cb5-6">        mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"milk"</span>),</span>
<span id="cb5-7">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,</span>
<span id="cb5-8">    )</span>
<span id="cb5-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_text(</span>
<span id="cb5-10">        top_countries,</span>
<span id="cb5-11">        aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>),</span>
<span id="cb5-12">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb5-13">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb5-14">    )</span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_text(</span>
<span id="cb5-16">        top_countries,</span>
<span id="cb5-17">        aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>),</span>
<span id="cb5-18">        nudge_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb5-19">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb5-20">    )</span>
<span id="cb5-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> labs(</span>
<span id="cb5-22">        title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Say Cheese: A World Tour"</span>,</span>
<span id="cb5-23">        subtitle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This map shows the number of cheese types per country and the most common milk used. This is nacho average cheese map!"</span>,</span>
<span id="cb5-24">        caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data from cheese.com via the TidyTuesday project"</span>,</span>
<span id="cb5-25">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most common milk type used"</span>,</span>
<span id="cb5-26">    )</span>
<span id="cb5-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme_void()</span>
<span id="cb5-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scale_size(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>), guide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb5-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scale_colour_brewer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accent"</span>)</span>
<span id="cb5-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme(</span>
<span id="cb5-31">        figure_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb5-32">        legend_text_legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb5-33">        legend_direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>,</span>
<span id="cb5-34">        legend_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb5-35">        legend_position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>),</span>
<span id="cb5-36">        plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fantasy"</span>),</span>
<span id="cb5-37">        plot_subtitle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb5-38">        plot_caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb5-39">    )</span>
<span id="cb5-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guides(colour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>guide_legend(override_aes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}))</span>
<span id="cb5-41">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/isabelzimmerman/.pyenv/versions/3.11.4/envs/docker/lib/python3.11/site-packages/plotnine/layer.py:364: PlotnineWarning: geom_point : Removed 11 rows containing missing values.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/index_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If you’re interested in entering the plot contest, but aren’t sure what data to use, here are a few options that look like a lot of fun:</p>
<ul>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-05-30/readme.md">Verified oldest people</a></li>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-02-13/readme.md">Valentine’s Day consumer data</a></li>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-05-14/readme.md">The Great American Coffee Taste Test</a></li>
</ul>
<p>Hope to see some of your plots!</p>
<p><em>cheers, isabel</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Truthfully, I made this plot because I’m a data nerd with a weird idea of fun. Since I’m an employee of the company Posit (who is sponsoring this contest), I cannot actually enter. <em>But you can!</em> Prizes include fun swag, subscriptions to services to host your portfolio, and the priceless bragging rights of being a open source plotting champion 🏆↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/</guid>
  <pubDate>Tue, 25 Jun 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/output.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Cookie reviews: chocolate chip with cornstarch and heavy cream</title>
  <link>https://isabelizimm.me/posts/2024-06-05_cookie-recipes/</link>
  <description><![CDATA[ 




<p>3.75/5 ⭐. Besides my general annoyance with any recipe that involves a mixer<sup>1</sup>, this is a decent cookie. They’re quite sweet and very chewy. The amount of dairy in this cookie is enough that lactose-intolerant people need a warning. I don’t think this recipe is worth buying heavy cream and cornstarch, but if you already own these ingredients, no one is going to complain if you whip up a batch of these bad boys.</p>
<pre><code>1 cup unsalted butter
2 1/4 cups all-purpose flour
1 tablespoon cornstarch
1 teaspoon baking soda
1 teaspoon salt
1 cup brown sugar
3/4 cup granulated sugar
1 egg room temp
1 egg yolk, room temp
1 tablespoon heavy cream
2 1/2 teaspoons vanilla extract
1 cup chocolate chips

0. Preheat oven to 350F.
1. Melt butter over stove or in microwave.
It will smell fragrant, almost nutty. Put in freezer for 10 mins. 
2. Mix flour, cornstarch, baking soda, salt together in a bowl.
3. Add both sugars in with butter, beat until fluffy (about 2 mins on medium).
4. Stir in eggs, heavy cream, and vanilla.
5. Add dry ingredient mixture, stir
6. Fold in chocolate chips
7. Bake in oven for 8-ish mins</code></pre>
<p>This recipe was found on Instagram, credits to <a href="https://www.instagram.com/samanttha_chen/"><span class="citation" data-cites="samanttha_chen">@samanttha_chen</span></a>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I don’t own a stand up mixer. I use a hand mixer that resides in the back corner of a dark cabinet in it’s massive original case for “easier storage” even though I can’t fit the attachments in the case, so they live in a few different locations, depending on who emptied out the dishwasher. Anyway, the hand mixer is mostly a pain to get out. There’s a better organizational system there, but I am so used to my broken workflow that it’s almost circled back around to being a good one. That’s all to say that I don’t really enjoy the cookie recipes that require you to beat sugars and butter until fluffy. This is one of them.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>cookies</category>
  <guid>https://isabelizimm.me/posts/2024-06-05_cookie-recipes/</guid>
  <pubDate>Wed, 05 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Abstract art</title>
  <link>https://isabelizimm.me/posts/2024-05-14_abstracts/</link>
  <description><![CDATA[ 




<p>Starting to write a new conference proposal (also called an abstract) is my least favorite part of any conference experience. I’ll think I have a half-decent idea, but then I open up a blank document and feel like I should be able to articulate my thoughts in a surprising-yet-thought-provoking, high-tech-yet-accessible, gentle-yet-striking way. After a first draft, I’ll reread my work and realize the most striking thing that occurred was I wrote a sentence that was 15 lines long, of which 6 lines are actually related to what I wanted to talk about and the rest are talking about the fact I’d like to talk about it. Also, I typed “teh” instead of “the.” It’s scary! Conference committee members use these few words to evaluate your topic’s fit into the conference schedule, and it will likely be the only context attendees use to determine if they want to watch your session. The overall goal of an abstract is to 1) inform the reader what your topic is about and 2) give compelling reasons to invest time and mental bandwidth in your ideas. Abstracts are an art form, but also a skill you can build to make the whole experience feel a little bit easier.</p>
<p>Like solving any good engineering problem, the first step is to read the documentation (even if you feel like you already know what should be done). The conference likely has a page or two about the kinds of talks they are interested in, the length of an abstract, and previous talks. Note if there is a maximum length; double check if that length is <em>characters</em> or <strong>words</strong>. Check out the topics of previously accepted submissions to do a sanity check if your work fits in with prior art. A little bit of reading here is worthwhile to make sure you are setting yourself up for success in the submission stage.</p>
<p>If you are considering <em>is my idea worth a submission?</em>– the answer is YES! You have unique ideas, experiences, and thought processes that people want to hear. Learning how you and your team approached and solved a difficult problem, why you chose one framework over another, or even <a href="https://www.youtube.com/watch?v=7jiPeIFXb6U">well-researched hot-takes</a> all make for great presentations. If a full length talk seems too overwhelming, many conferences have lightning talks that are 3-10 minutes long you can sign up for beforehand or during the conference itself. Lightning talks are lots of fun; <a href="https://github.com/tracykteal/lightning-talks">Tracy Teal has put together a great guide on how to prepare lightning talks</a>.</p>
<p>Start with a list of what you hope to achieve in your talk. At the very least, have your main topic plus, why people should care, and what people will learn. This list will become your guiding light on what really matters when you are tempted to add feature lists to your abstract.</p>
<p>During a panel discussion on <a href="https://plg.uwaterloo.ca/~migod/research/beckOOPSLA.html">How to Get a Paper Accepted at OOPSLA, Kent Beck’s advice</a> was that a good abstract only needs four sentences:</p>
<blockquote class="blockquote">
<p>The first [sentence] states the problem. The second states why the problem is a problem. The third is my startling sentence. The fourth states the implication of my startling sentence.</p>
</blockquote>
<p>Most of the abstracts I write follow some loose interpretation of this four-sentence rule. The first sentence in an abstract should clearly explain the pain point you are trying to resolve in your talk; the second sentence is why that pain point matters. The third sentence is where you explain how your work solves the problem, or otherwise is the main idea of the talk. Finally, the fourth sentence is where you get to envision a world where someone uses your third-sentence solution. What process has been improved, what friction has been alleviated, or what has otherwise improved in someone’s life due to your talk? Make an argument as to why your talk is worth attending.</p>
<p>In the case of longer abstracts, I usually end up with three-ish paragraphs.</p>
<ul>
<li>The first paragraph is created using the four-sentence rule.</li>
<li>The second paragraph provides evidence of why your solution is the best choice.</li>
<li>The third and final paragraph describes what knowledge listeners should know when they walk away.</li>
</ul>
<p>The evidence outlined in the second paragraph will probably become the main subpoints in a slide deck when you are presenting. Think of the reasons <em>why</em> you believe your main idea is correct. Maybe you’re writing about how framework X is the best one; this paragraph could mention that framework X supports many relevant data types, is able to be integrated into the cloud backend that your team uses, and has a great community that helps answer all your questions. The third paragraph should answer the question: <em>What will I know at the end of this talk, that I don’t know now?</em> Keep in mind that the average listener will <strong>not</strong> walk away as an advanced user of your solution, since they will probably <a href="https://presented.co.uk/how-much-do-people-remember-from-a-presentation/">only remember 10% of your talk by the time they get back home</a>. They might, however, still remember why your solution is a good idea and when to use it. The last 1-2 sentences of the abstract can be a recap of the problem and solution outlined in the first paragraph.</p>
<p>With the structure done, reread your abstract once and check for misspelled words, clarify any confusing wording, and remove or explain jargon. Jargon for one industry may be common knowledge in another, but use your best judgment on what is reasonable; have a friend or colleague read through your work as a second opinion if you’re not sure!</p>
<p>It’s easy to fall into the trap where you want to write your whole talk out when you are given a healthy word count to do so. Do remember that a limit is just that, a limit. Clearly outline the points you are going to make and why they are important, but this is not the time to explain all the details. Readers will appreciate brevity, so long as you give enough information that they can assess the relevance of your talk to their interests. It may help to remember who you are writing this abstract for:</p>
<blockquote class="blockquote">
<p>If I am sure to consider my audience – first, an overworked program committee member, and second, a jetlagged and overstimulated conference attendee – I am far more likely to explain things clearly and eschew jargon. (<a href="https://chapeau.freevariable.com/2015/11/concrete-advice-about-abstracts.html">William Benton’s excellent blog post “Concrete advice about abstracts”</a>)</p>
</blockquote>
<p>You’ll want to have thought about your talk content, but in the abstract submission phase, it is not necessary to have a script or slides or anything extra prepared until you hear if your abstract is accepted.</p>
<p>Happy conference season, wishing you all accepted talks!</p>



 ]]></description>
  <category>conferences</category>
  <guid>https://isabelizimm.me/posts/2024-05-14_abstracts/</guid>
  <pubDate>Tue, 14 May 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-05-14_abstracts/toast_typing.png" medium="image" type="image/png" height="109" width="144"/>
</item>
<item>
  <title>The right tools to learn (my first experience using Spline)</title>
  <link>https://isabelizimm.me/posts/2024-04-15_3d-quarto/</link>
  <description><![CDATA[ 




<p>I found out about <a href="https://spline.design/">Spline</a> from a recommended video on Instagram. It was marketed as <a href="https://www.blender.org/about/">Blender</a> <a href="https://en.wikipedia.org/wiki/For_Dummies">for dummies</a>. I don’t know anything about game design. My complete knowledge of Blender was that it was good for smoothies and also animation. But, I like to think I’m a sort of creative person. I like to learn and make new things. I was certainly a dummy in this context. Why not try it out?</p>
<p>I logged in (it’s <a href="https://www.investopedia.com/terms/f/freemium.asp#:~:text=our%20editorial%20policies-,What%20Is%20Freemium%3F,for%20supplemental%20or%20advanced%20features.">freemium</a> software), and opened up one of the templates provided. There were many instructional videos and tutorials to teach you how to use the software, but I went in headfirst and hoped for the best. If you have used Photoshop-y applications before, the layout might look vaguely reminiscient. There’s a pane on the left showing all the objects in a scene, and a pane on the right to edit a selected object. There’s buttons on top to drop you into the world, add new shapes, and easily export your scene.</p>
<p>Here’s my “The Intersection” that shows a split between two ecosystems. Walk around, flip over the bench, stand on some dinosaur bones, fall off the edge into eternal darkness, there is no plot! Click on the graphic, then you can use the arrow keys to change the camera and WASD keys to move the bunny plus space bar to jump.</p>
<script type="module" src="https://unpkg.com/@splinetool/viewer@1.0.94/build/spline-viewer.js"></script>
<p><spline-viewer url="https://prod.spline.design/TaVUziQLDLcyRmM3/scene.splinecode"></spline-viewer></p>
<p>Spline is not the software where Fortnite is developed. But, it doesn’t need to be. It’s a delightful tool that is easily understood, has a simple UI that doesn’t require you to know <em>everything</em> to be productive, and offers great templates to build from. My goal was never to change career paths into game design; my goal was to make something that isn’t too embarrassingly bad to put in a blog post and have some fun along the way.</p>
<p>Anyway, like most software, Spline is a good example of the fact that sometimes you don’t need the best tool for the job, you need the best tool for you.</p>



 ]]></description>
  <category>fun</category>
  <guid>https://isabelizimm.me/posts/2024-04-15_3d-quarto/</guid>
  <pubDate>Mon, 15 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-04-15_3d-quarto/intersection.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>So, you want to learn about MLOps</title>
  <link>https://isabelizimm.me/posts/2024-04-05_learn-mlops/</link>
  <description><![CDATA[ 




<p>If you’re interested in learning more about MLOps, I’ve culminated a list of some of my favorite resources to learn about MLOps as a whole as well as specific MLOps practices.</p>
<section id="starting-out" class="level2">
<h2 class="anchored" data-anchor-id="starting-out">Starting out</h2>
<p>If you’re wanting to invest a books-length amount of time into learning about MLOps, <a href="https://www.oreilly.com/library/view/designing-machine-learning/9781098107956/"><em>Designing Machine Learning Systems</em> by Chip Huyen</a> is my number one recommendation. This book has information for the whole machine learning lifecycle from building a model to building a system for that model to live in. If you’re mostly interested in the MLOps parts, I recommend starting with chapters 2, 7, 8, 9, and 11.</p>
<p><a href="https://ml-ops.org/content/mlops-principles">MLOps Principles</a> is a culmination of a lot of the most-cited MLOps literature, so if you’re wanting a starting point with lots of side quest opportunities, this is a good place to start. I particularly liked the idea of “Continuous X”; this extends the idea of CI/CD (continuous integration/continuous delivery) to include Continuous Training and Continuous Delivery. It highlights out an important piece of MLOps: it’s never finished.</p>
<p>If you’re interested in learning what “real” MLOps people do, <a href="https://arxiv.org/pdf/2209.09125.pdf">“Operationalizing Machine Learning: An Interview Study” by Shreya Shankar et al</a> is <strong>the article to read.</strong> This piece feels foundational to me. There is important discussion about the fundamental differences between building models and building traditional software, why not every model gets deployed, and much much more. It’s a digestable paper, and I highly recommend reading this one all the way through.</p>
<p>And, I can’t write this without giving a personal plug: I’ve given a number of MLOps talks, which you can view at the “Talks” tab on this page! A good “starting point” talk of mine is <a href="https://www.youtube.com/watch?v=hzrFU5-_9-E">Demystifying MLOps</a>, which I presented at <code>rstudio::conf(2022)</code>.</p>
</section>
<section id="special-topics" class="level2">
<h2 class="anchored" data-anchor-id="special-topics">Special topics</h2>
<p>Once you have a bit of MLOps context in your mind, there are lots of avenues to explore! If you’re interested in the pain points of <a href="https://www.youtube.com/watch?v=hBMHohkRgAA"><em>How ML Breaks: A Decade of Outages for One Large ML Pipeline</em> by Papasian and Underwood</a>. This video walks through all the ways the ML pipeline at Google has broken; breakages are categorized in numerous ways, but one particularly interesting one is ML failures/Non-ML failures. Spoiler alert: most failures were not machine learning failures.</p>
<p>With a model in production, you’ll want to monitor it. <a href="https://www.youtube.com/watch?v=LGXi2R70pVc"><em>Reliable Maintenance of Machine Learning Models</em> by Julia Silge</a> is a great overview of why you should be monitoring models. This talk outlines what “performing well” means to different stakeholders of model systems and explains the multiple types of drift that can happen once your model is out in the wild.</p>
<p>If you have implemented MLOps practices, <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/aad9f93b86b7addfea4c419b9100c6cdd26cacea.pdf">“The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction” by E.Breck et al.&nbsp;2017</a> is a must read. It shows and rates a practical progression of machine learning systems, which is often <em>not</em> adding versioning systems -&gt; adding model deployment -&gt; starting to monitor models; rather, it usually follows the pattern of systems are not implemented -&gt; systems are implemented manually -&gt; systems are run automatically.</p>
<p>Event streaming won’t be a required skill for all people who are using MLOps practices. However, if you want to learn about it, <a href="https://www.gentlydownthe.stream/"><em>Gently Down the Stream</em> by Mitch Seymour</a> is a children’s book which also happens to be the best explanation of Kafka I have ever read. Plus it is an adorable, digestible, maybe 5-minute read.</p>
<p>Finally– if you’ve devoured this list and are still hungry for more, <a href="https://huyenchip.com/mlops/">MLOps guide by Chip Huyen</a> is a secondary curated list of MLOps content that I have gone through and absolutely adore.</p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://isabelizimm.me/posts/2024-04-05_learn-mlops/</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-04-05_learn-mlops/maple_smile.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>Blind date with a data talk</title>
  <link>https://isabelizimm.me/posts/2024-03-07_blind-date-with-a-data-talk/</link>
  <description><![CDATA[ 




<p>A “blind date with a book” is where a book gets wrapped up in nondescript paper, and all the intro you get is a vague bullet point or two. You can’t judge a book by it’s cover, since, well, you can’t see it. You have to trust the synopsis and enjoy the adventure.</p>
<p>I got the idea to make a “blind date” with a data science talk after starting to curate a list of my favorite talks for a friend. Unrelated, I have been itching to play around with <a href="https://github.com/quarto-ext/shinylive">the <code>shinylive</code> project</a> to put some interactive things on my blog. Why not put these two together?</p>
<pre class="shinylive-python" data-engine="python"><code>#| '!! shinylive warning !!': |
#|   shinylive does not work in self-contained HTML documents.
#|   Please set `embed-resources: false` in your metadata.
#| standalone: true
#| viewerHeight: 300

import random
from shiny import reactive, render
from shiny.express import input, ui
from pathlib import Path

css_file = Path(__file__).parent / "styles.css"

dates = {
    "humor": [
        {
            "name": "Joel Grus: I don't like notebooks",
            "link": "https://www.youtube.com/watch?v=7jiPeIFXb6U"
        }, # joel grus i dont like notebooks
        {
            "link":"https://www.youtube.com/watch?v=hfqjyeA_z7s&amp;list=PL9HYL-VRX0oRFZslRGHwHuwea7SvAATHp&amp;index=40",
            "name": "Hadley Wickham: It's a Great Time to be an R Package Developer!"}, # hadley slide karaoke
        {
            "link":"https://www.youtube.com/watch?v=C9OlkY87vf8&amp;list=UULFYhY67dMuJ_w_9_cfkaruWQ&amp;index=8",
            "name": "Vicki Boykis: An ML Fairytale"
        }, # vicki boykis ml fairy tale
        {
            "link": "https://www.youtube.com/watch?v=D48NQTNg19s&amp;list=UULFYhY67dMuJ_w_9_cfkaruWQ&amp;index=40",
            "name":"Jacqueline Nolis: Alaska challenged my preconceived notions of storing sunset data"
        }, # jacqueline nolis time
        {
            "link": "https://www.youtube.com/watch?v=Pm9C-Cz4bXE&amp;t",
            "name": "JD Long: I'd have written a shorter solution but I didn't have the time"
        } # jd long shorter 
        ],
    "story": [
        {
            "link": "https://youtu.be/Pa1PNfoOp-I?si=rF3udat0nV9n04w6",
            "name": "JD Long: It's Abstractions All the Way Down..."
        }, # jd long abstractions
        {
            "link": "https://youtu.be/DVQJ39_9L0U?si=PbsjmQR96rrz7scy",
            "name": "Kari Jordan: Black Hair and Data Science Have More in Common Than You Think"
        }, # kari jordan black hair
        {
            "link": "https://www.youtube.com/watch?v=g1ib43q3uXQ",
            "name": "Felienne Hermans: How to teach programming (and other things)?"
        }, #  felienne hermans excel
        {
            "link": "https://www.youtube.com/watch?v=s3WbEfoxRjs",
            "name": "Sophie Watson: What they didn’t teach you in Grad School"}, # sophie watson what they didnt teach u
        ],
    "nerd": [
        {
            "link": "https://www.youtube.com/watch?v=sYliwvml9Es",
            "name": "Jeremy Howard: A hacker's guide to open source LLMs"
        }, # jeremy howard llm
        {
            "link": "https://www.youtube.com/watch?v=-YEUFGFHWgQ",
            "name": "Calvin Hendryx-Parker: Bootstrapping Your Local Python Environment"}, # calvin hendryx-parker bootstrapping python
        {
            "link": "https://www.youtube.com/watch?v=7nNB__jK9AY",
            "name": "Alison Presmanes Hill: The Happiest Notebooks on Earth"
        }, # 
        {
            "link": "https://www.youtube.com/watch?v=EvQUVzDJRJ8&amp;list=UULFYhY67dMuJ_w_9_cfkaruWQ&amp;index=42",
            "name": "Chelsea Parlett-Pelleriti: Why Are You The Way That You Are: Sklearn Quirks"
        } # chelsea parlett scikit
        ],
    "reveal": [
        {
            "link": "https://www.youtube.com/watch?v=qKfkCY7cmBQ",
            "name": "Peter Wang: Programming for everyone (or the next 100 million Pythonistas)"}, # peter wang pyright
        {
            "link": "https://www.youtube.com/watch?v=HpqLXB_TnpI",
            "name": "Joe Cheng: The Past and Future of Shiny"
        }, # joe cheng shiny py 
        {
            "link": "https://www.youtube.com/watch?v=p7Hxu4coDl8", 
            "name": "Mine Çetinkaya-Rundel &amp; Julia Stewart Lowndes: Hello Quarto: Share, Collaborate, Teach, Reimagine"
        }, # mine and julia hello quarto
    ],
    "small": [
        {
            "link": "https://www.destroyallsoftware.com/talks/wat",
            "name": "Destroy all software: WAT"
        }, # wat
        {
            "link": "https://youtu.be/V3XdLVAwmX0?si=5gPV2bXsgURLqCYG",
            "name": "Libby Heeren: Why You Should Stop Networking and Start Making Friends"
        }, # libby heeren stop networking
        {
            "link": "https://youtu.be/ZDK5DZOgHD8?si=3q1q0Zo0z-Oet_Bb&amp;t=1150",
            "name": "Katy Huff: I do (automate things)"
        }, # katy huff wedding website
        {
            "link": "https://www.youtube.com/watch?v=ES1LTlnpLMk&amp;list=UULFYhY67dMuJ_w_9_cfkaruWQ&amp;index=41",
            "name": "Jenny Bryan: How to name files"
        } # jenny bryan file name
        ]
}

ui.include_css(css_file)

ui.input_radio_buttons(  
    "radio",  
    "I want a data science talk with:",  
    {
        "humor": "Lots of humor", 
        "story": "A good story", 
        "nerd": "Maximum nerdiness",
        "reveal": "An exciting new tech for the time",
        "small": "Something bite-sized"
    },  
)
ui.input_action_button("action_button", "Find me a talk 🔮")  

@render.express()
@reactive.event(input.action_button)
def _():
    k = input.radio()
    rec_talk = random.choice(dates[k])
    ui.HTML(f'&lt;p&gt;&lt;/p&gt;&lt;a href={rec_talk["link"]} target="_blank" color="purple"&gt;{rec_talk["name"]}&lt;/a&gt;')

## file: styles.css
body {
    background-color: #FDFCFC;
    color: #404040;
  }
a {
  color: #404040;
}</code></pre>
<p>Shoutout to Madison Yonash for asking about new data science talks and effectively <a href="https://www.explainxkcd.com/wiki/index.php/356:_Nerd_Sniping">nerd sniping</a> me into spending an evening building this.</p>



 ]]></description>
  <category>conferences</category>
  <guid>https://isabelizimm.me/posts/2024-03-07_blind-date-with-a-data-talk/</guid>
  <pubDate>Thu, 07 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-03-07_blind-date-with-a-data-talk/talk-rec.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>We’re making a blog (IDE agnostic edition)</title>
  <link>https://isabelizimm.me/posts/2023-09-04_making-a-quarto-blog/</link>
  <description><![CDATA[ 




<p>My partner, Val, has been asking to making a fancy Quarto blog. Today, we’re going through this step-by-step together. There’s a few different ways to do this, and the RStudio IDE has UI to make this a pretty slick process. However, I don’t spend much time in RStudio, so here’s my IDE agnostic workflow. You’ll need:</p>
<ul>
<li>A GitHub account</li>
<li>To <a href="https://quarto.org/docs/get-started/">install Quarto here if you haven’t yet</a></li>
<li>Access to the command line (eg, “Terminal” on a Mac)</li>
</ul>
<section id="step-1-make-the-repository" class="level3">
<h3 class="anchored" data-anchor-id="step-1-make-the-repository">Step 1: Make the repository</h3>
<p>Go to <a href="https://github.com">github.com</a> and click on your profile image in the top right corner. In the dropdown, click on <code>Your repositories</code> and then click <code>New</code> to create a new repository.</p>
<p><img src="https://isabelizimm.me/posts/2023-09-04_making-a-quarto-blog/images/step-1.png" class="img-fluid"></p>
<p>Create a new repository in GitHub and name it <code>your-github-username.github.io</code>. This is a secret repository structure in GitHub to host a blog for your account! Next, open up the terminal and use the <code>cd</code> command to navigate to the folder you would like to store your blog in. Use the command <code>git clone {repository-url}</code> to copy the repository onto your computer, and <code>cd your-github-username.github.io</code> into your local version.</p>
</section>
<section id="step-2-create-blog" class="level3">
<h3 class="anchored" data-anchor-id="step-2-create-blog">Step 2: Create blog</h3>
<p>In the folder for your repository, type <code>quarto create project blog .</code> into your CLI tool and press enter. Congratulations, you have built a blog! Use <code>quarto preview</code> to build and view it locally.</p>
</section>
<section id="step-3-update-the-blog" class="level3">
<h3 class="anchored" data-anchor-id="step-3-update-the-blog">Step 3: Update the blog</h3>
<p>There’s a few places you will want to update before you publish your blog for the world to see. First, open up the file called <code>index.qmd</code> and add some information about yourself. I have a few sentences of introduction, my education, and how to get in contact with me. Next, open up the folder called <code>posts/</code> and update it to remove the default posts. If you’d like to write a blog post of your own, the easiest way to organize the posts is by making each one into its own folder. Then, each folder can contain a <code>.qmd</code>, <code>.md</code>, <code>.Rmd</code>, or <code>.ipynb</code> file as a post and any relevant images.</p>
<p>For simple aesthetics, you can go to the <code>_quarto.yml</code> file and <a href="https://quarto.org/docs/websites/website-blog.html#themes">try out different bootstrap themes</a>, or add some color to your navbar by adding a <code>background</code> field to your navbar</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my blog"</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my personal blog"</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffccff"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # accepts color names like red, blue, or hex codes</span></span></code></pre></div>
</section>
<section id="step-4-push-to-github-pages" class="level3">
<h3 class="anchored" data-anchor-id="step-4-push-to-github-pages">Step 4: Push to Github Pages</h3>
<p>While still in the folder of your blog, run <code>quarto publish gh-pages</code>. You will be prompted with some text like: Publish site to your-github-username.github.io? Accept this, and let it run.</p>
</section>
<section id="step-5-set-the-deployment-branch-to-gh-pages" class="level3">
<h3 class="anchored" data-anchor-id="step-5-set-the-deployment-branch-to-gh-pages">Step 5: Set the deployment branch to <code>gh-pages</code></h3>
<p>Back to GitHub, view your repository. Go to the settings for the repo, and click on <code>Pages</code>. Then, change the <code>Build and deploy from source</code> to the <code>gh-pages</code> branch.</p>
<p><img src="https://isabelizimm.me/posts/2023-09-04_making-a-quarto-blog/images/gh-pages.png" class="img-fluid"></p>
<p>If you go back to the main page of your repository, you will see a tab <code>Deployments</code> underneath the repository description. The green checkmark means your blog has been successfully deployed! The url will be something like <code>your-github-username.github.io</code></p>
<p>Going forward, each time you want to update your website, you can reuse the <code>quarto publish gh-pages</code> command.</p>


</section>

 ]]></description>
  <category>quarto</category>
  <guid>https://isabelizimm.me/posts/2023-09-04_making-a-quarto-blog/</guid>
  <pubDate>Mon, 04 Sep 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A year in review: vetiver</title>
  <link>https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/</link>
  <description><![CDATA[ 




<p>It has been almost a year of vetiver! Vetiver for Python (0.1.8) and R (0.1.8) seeks to provide fluent tooling to version, share, deploy, and monitor a trained model.</p>
<ul>
<li>Where vetiver is now</li>
<li>Where vetiver is going</li>
<li>Where vetiver is <em>not</em> going</li>
</ul>
<section id="the-journey" class="level2">
<h2 class="anchored" data-anchor-id="the-journey">The journey</h2>
<p>Recently, the team dedicated a month to reading about the world of MLOps, as it is today. We all read the fantastic book <a href="https://www.oreilly.com/library/view/designing-machine-learning/9781098107956/">Designing Machine Learning Systems</a> by Chip Huyen and split up numerous other academic articles and web content between ourselves. The world of machine learning operations moves fast, and we wanted to ensure the choices we had made early on (eg, focusing on versioning, deploying, and monitoring) would serve data practitioners best.</p>
<p>After reading <em>many</em> different definitions of MLOps, the one we found most useful is: “a set of practices to deploy and maintain machine learning models in production reliably and efficiently.” While not every MLOps practice is applicable at scale for every team, these best practices can elevate any size of project.</p>
<p>MLOps applies the same basic principles as DevOps (development operations) in a specialized machine learning context. One common point of tension in MLOps is that data science is highly experimental and iterative compared to general purpose software delivery, but deploying to a production environment still requires reliable software engineering delivery practices. To help ease this pain point, APIs are commonly used to deploy models due to their stability and simplicity. APIs can be tested, and they act nearly identically in every architecture. This allows for software engineering practices to be applied to APIs. They have a straightforward architecture to configure and update, giving data scientists agility to retrain and update models as needed.</p>
<p>Tools labeled as “MLOps frameworks” have a broad scope. Tasks generally fall into one of a few different categories:</p>
<ul>
<li>Orchestration or pipelines</li>
<li>Experiment tracking</li>
<li>Model versioning</li>
<li>Model deployment</li>
<li>Model monitoring</li>
</ul>
<p>Vetiver spans a few of these tasks, but is not a tool built for orchestration or experiment tracking. Rather, Vetiver focuses on the practices of versioning, deploying, and monitoring and will continue building support for these tasks.</p>
</section>
<section id="where-vetiver-is-now" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-now">Where vetiver is now</h2>
<p>Vetiver also leverages the versioning and sharing capabilities of the pins package in Python and R. This package brings a straightforward way to read and write objects to different locations and allows for certain data types (namely csv and arrow files) to be passed between the Python and R language fluently.</p>
<p>Within vetiver itself, the use of <code>VetiverModel</code>, <code>VetiverAPI</code>, and monitoring helper functions gives practitioners lightweight support to bring their models to many different locations via one line deployment functions (for <a href="https://posit.co/products/enterprise/connect/">Posit Connect</a>) or Dockerfile generation (for <a href="https://vetiver.rstudio.com/learn-more/deploy-with-docker.html">numerous on-prem or public cloud locations</a>). These objects are able to be extended to support more advanced use cases. Vetiver is able to quickly prototype REST APIs, and then scale these prototypes safely.</p>
</section>
<section id="where-vetiver-is-going" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-going">Where vetiver is going</h2>
<p>Fluent monitoring practices is crucial for a robust deployment. While the CI/CD in monitoring can be infrastructure dependent, it is important to close the loop between model prediction, monitoring, and retraining. Feedback loops are a place where bias in models can aggregate undetected. Any continuous monitoring support necessitates careful thought on how to uncover model (un)fairness.</p>
<p>The composability of vetiver with other projects, such as MLFlow or Metaflow, is needed to allow practitioners to build an MLOps framework that is flexible and meets the need of their team. Composability in this sense also includes platform agnosticism for public clouds such as Amazon Web Services, Azure, and Google Cloud Platform. Currently, generic Dockerfiles exist that can be hosted on these platforms, but extended documentation is needed for specific workflows.</p>
</section>
<section id="where-vetiver-is-not-going" class="level2">
<h2 class="anchored" data-anchor-id="where-vetiver-is-not-going">Where vetiver is <em>not</em> going</h2>
<p>DAG creation is currently out of scope of vetiver. If this is to be supported later on, it would likely end up in a new tool for maximum flexibility.</p>
<p>Support for automatic creation of model registries is not currently short-term plan. However, using pins and Quarto together can create a beautiful document to track your deployed objects. If you’re interested in this topic, this demo shows how to use <a href="https://colorado.rstudio.com/rsc/bike-predict-r-dashboard/document.html">pins + Quarto to track your models.</a></p>
<p>In all, we have learned so much from you all this year, and look forward to another year of helping data scientists bring models into production!</p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/</guid>
  <pubDate>Tue, 25 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-10-25_state-of-vetiver/logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title>Pyenv in RStudio</title>
  <link>https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/</link>
  <description><![CDATA[ 




<p>I am a chronic destroyer of Python environments. My favorite tools right now are <a href="https://github.com/pyenv/pyenv">pyenv</a> and <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>, which keep me mostly out of trouble, but there is some extra legwork to get them set up with RStudio IDE.</p>
<p>I usually start by checking what Python is being used by going to the RStudio console and running:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">py_config</span>()</span></code></pre></div>
<p>This gives me:</p>
<pre><code>python:         /usr/bin/python3
libpython:      /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/config-3.8-darwin/libpython3.8.dylib
pythonhome:     /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8:/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8
version:        3.8.9 (default, Aug  3 2021, 19:21:54)  [Clang 13.0.0 (clang-1300.0.29.3)]
numpy:           [NOT FOUND]</code></pre>
<p>which is nice, since at least some sort of Python is THERE, but I want to follow the Golden Rule: <strong>don’t touch the system Python</strong>.</p>
<p>Time to do some environment gymnastics. My first move is to allow <code>pyenv</code> to share its environment, which is <a href="https://rstudio.github.io/reticulate/articles/versions.html#locating-python">required to use envs with <code>reticulate</code></a>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span> PYTHON_CONFIGURE_OPTS=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--enable-shared"</span> pyenv install 3.9.4</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> virtualenv 3.9.4 newenv</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you skip this step, you will get an error similar to:</p>
<pre><code>Error: '/Users/isabelzimmerman/.pyenv/versions/3.9.11/envs/pydemo/bin/python' was not 
built with a shared library. reticulate can only bind to copies of Python 
built with '--enable-shared'.</code></pre>
</div>
</div>
<p>Next, we’re going to restart the R session, and try to just add this new Python environment in there. The key here is RESTART R SESSION (on macOS, this is commmand+shift+0) and then DON’T TRY TO RUN ANYTHING IN PYTHON BEFORE THESE NEXT FEW COMMANDS. If you “just try to run one thing to see if {insert ridiculous Python MultiEnvironmentVerse of Madness strategy} worked,” you will end up in an endless loop of setting environment variables that are ignored since they are already initialized (this sentence is hard-won for me). Let’s try to use reticulate to set Python first.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_python</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">required =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>gives us:</p>
<pre><code>Warning message:
The request to `use_python("/Users/isabelzimmerman/.pyenv/versions/3.9.11/envs/newenv/bin/python")` 
will be ignored because the environment variable RETICULATE_PYTHON is set to "/usr/bin/python3" </code></pre>
<p>This is a helpful warning that tells us we need to set up the RETICULATE_PYTHON environment variable. We can do this by:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">RETICULATE_PYTHON=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python'</span>)</span></code></pre></div>
<p>and then check to see if it worked since we have pretty strong trust issues.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RETICULATE_PYTHON"</span>)</span></code></pre></div>
<pre><code>[1] "/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python"</code></pre>
<p>Promising! Let’s check out the <code>reticulate::py_config()</code> now.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">py_config</span>()</span></code></pre></div>
<pre><code>python:         /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python
libpython:      /Users/isabelzimmerman/.pyenv/versions/3.9.4/lib/libpython3.9.dylib
pythonhome:     /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv:/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv
version:        3.9.4 (default, May 31 2022, 09:32:34)  [Clang 13.0.0 (clang-1300.0.29.3)]
numpy:          /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/lib/python3.9/site-packages/numpy
numpy_version:  1.23.1

NOTE: Python version was forced by RETICULATE_PYTHON</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If this doesn’t work, I would tell you to go digging for your RETICULATE_PYTHON environment variable. Some places to check out:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> ~/.Renviron</span></code></pre></div>
<p>should open a file that has environment variables, specifically our elusive RETICULATE_PYTHON. We can update that file to look like:</p>
<pre><code>export RETICULATE_PYTHON=/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python</code></pre>
</div>
</div>
<p>IT WORKED! Time to run all the Python I can. I’m fully open to better workflows if you have them, but for now, this gets me on my way when I feel the despair of another broken Python environment.</p>
<p>Also, S/O to <a href="https://firas.io/post/pyenv_rstudio/">Firas Sadiyah’s blog post on pyenv + RStudio</a> which has helped me many a time to get on the right track!</p>



 ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/</guid>
  <pubDate>Mon, 19 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/pyenv.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Multiple models on one API</title>
  <link>https://isabelizimm.me/posts/2022-09-10_multiple-models-api/</link>
  <description><![CDATA[ 




<p>As someone who identifies as a Chicago Bears fan for life, I have some strong <del>superstitions</del> rituals on gameday. In a completely hypothetical example, I might have one model that I feel must be used when the Bears have a home game, and a different model for any other day. (They always win when I use this model to write blog posts on game days, and I fear a replay of the 2016 season when our win-loss ratio was 3-13 if I change my ways.)</p>
<p><strong>Oftentimes you need to deploy more than one model.</strong> Even if the fate of your favorite NFL team isn’t depending upon your models’ locations, <strong>it’s important to understand where these models should be living.</strong> tldr;</p>
<ol type="1">
<li>Input data is the same -&gt; use one API</li>
<li>Input data is not the same -&gt; use multiple APIs</li>
</ol>
<p>(These are not definitive rules. A lot of this is dependent upon architecture, how your deployment is set up, what works best for your organization, etc. Also, vetiver allows you to break both of these rules!)</p>
<p>If your models are unrelated and the input data is different, you probably want to put them on different APIs. However, if the input data is the same for multiple different models, it might make sense to deploy them on the same API, but at different endpoints.</p>
<p>For our Chicago train ridership data, we ALWAYS want to predict ridership from the same parameters every time. However, if the data indicates it was a home game for the Chicago Bears, we want to use our lucky model.</p>
<p>Let’s start by loading some data and use <code>tidymodels</code> to put all our preprocessing in one recipe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(Chicago)</span>
<span id="cb1-3"></span>
<span id="cb1-4">chicago_small <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">730</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two years of data</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">chicago_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(ridership <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> Chicago) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_date</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_holiday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_original_cols =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_dummy</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_zv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_normalize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_pca</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(stations), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_comp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<p>We can then use tidymodels to make multiple different models quickly. Notice that I am actually putting my preprocessing recipe in the recipe with my model. This is intentional, and best practice for modeling.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Feature engineering is part of your model workflow. You should be packaging this up with your model and deploying it as part of your model workflow. In Python, this involves using something like <a href="https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html">scikit learn Pipelines</a>. In R, this involves using something like <a href="https://workflows.tidymodels.org/">tidymodels workflows</a>.</p>
<p><img src="https://www.tmwr.org/premade/proper-workflow.svg" class="img-fluid" alt="Flowchart of data and predictors feeding into the modeling workflow, which is comprised of Principal Component Analysis AND least squares estimation. Model workflow feeds into fitted model."></p>
</div>
</div>
<p>Build a few models for home games (support vectors for extra support at home):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tree_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svm_linear</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LiblineaR"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regression"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">home_game_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>(chicago_rec, tree_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(chicago_small)</span></code></pre></div>
</div>
<p>And not home games:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">linear_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">not_home_game_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>(chicago_rec, tree_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(chicago_small)</span></code></pre></div>
</div>
<p>Next, I will make some deployable model objects, or <code>vetiver_model</code>, with the <code>vetiver</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vetiver)</span>
<span id="cb4-2"></span>
<span id="cb4-3">home <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_model</span>(home_game_model, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>)</span>
<span id="cb4-4">not_home <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_model</span>(not_home_game_model, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not_home"</span>)</span></code></pre></div>
</div>
<p>Normally we would be iterating through models and possibly <a href="https://vetiver.rstudio.com/get-started/version.html#store-and-version-your-model">versioning</a> them as well, but let’s skip that step and go right to deployment.</p>
<p>I’ll deploy these two models on ONE plumber API by using a combination of <code>vetiver_pr_post()</code> and <code>vetiver_pr_docs()</code> along with the <code>path</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(plumber)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_post</span>(home, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home_game"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_docs</span>(home) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_post</span>(not_home, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/not_home_game"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_pr_docs</span>(not_home) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pr_run</span>()</span></code></pre></div>
</div>
<p>Now, to make predictions, I will route data to each endpoint respectively. To do this on your own computer, you will have to run the above commands as <a href="https://solutions.rstudio.com/r/jobs/">background job</a> (or <a href="https://vetiver.rstudio.com/learn-more/deploy-with-docker.html">deploy it with docker.</a>)</p>
<p>We can make predictions at each endpoint with data. Of course this can be as complex or simple as you desire, but here’s the meat-and-potatoes of it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">home_endpoint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_endpoint</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://127.0.0.1:5331/home_game'</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">home_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Bears_Home <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(home_endpoint, home_data)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">not_home_endpoint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vetiver_endpoint</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://127.0.0.1:5331/not_home_game'</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">not_home_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Chicago <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Bears_Home <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(not_home_endpoint, not_home_data)</span></code></pre></div>
</div>
<p>We have now created an API with multiple models at various endpoints, and successfully interacted with them! This is a great start to making more complex MLOps workflows with vetiver.</p>



 ]]></description>
  <category>mlops</category>
  <guid>https://isabelizimm.me/posts/2022-09-10_multiple-models-api/</guid>
  <pubDate>Sat, 10 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-09-10_multiple-models-api/beardown.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Github Actions all the way down</title>
  <link>https://isabelizimm.me/posts/2022-03-30_gha-making-gha/</link>
  <description><![CDATA[ 




<section id="the-lore" class="level1">
<h1>The lore</h1>
<p>I spent a while exploring how Python packages are made. It’s the wild west out there. There’s too many setup files, testing frameworks, no agreed-upon directory structure, and generally enough information to make your head spin. Luckily, you can use tools like <a href="https://cookiecutter.readthedocs.io/en/stable/index.html">cookiecutter</a> to quickly get started (once you figure out <a href="https://github.com/search?q=cookiecutter&amp;type=Repositories">which cookiecutter</a> you want to use). For my use case, I wanted to make a simple cookiecutter, but wanted to run some tests to make sure my configuration of files did all the things I expected it to do.</p>
<p>The workflow was:</p>
<pre><code>1. Edit my `cookiecutter`. 
2. Run my cookiecutter to make a new package. 
3. Push my new package to Github. 
4. Run Github Actions. 
5. Realize I messed up in step 1.</code></pre>
<p>But what if, Github Actions could use the cookie cutter repo to create ANOTHER repo to automatically generate your package? And what if that freshly cookie-cut repo would run its own Github Actions to ensure everything was properly set up? Useless? Most likely. But, I was going to do it anyway.</p>
</section>
<section id="see-it-in-github-action" class="level1">
<h1>See it in (Github) action</h1>
<p><a href="https://github.com/isabelizimm/cookiecutter-custompy/blob/main/.github/workflows/gen_cookie.yml">GitHub Action that pushes to a different repo.</a></p>
<p><a href="https://github.com/isabelizimm/making-cookies/tree/dev-branch/.github/workflows">GitHub Actions in receiving repo that runs once a push has been made.</a></p>
</section>
<section id="set-up" class="level1">
<h1>Set up</h1>
<p>You will need two different repos, a sending repo and receiving repo. In my case, the <a href="https://github.com/isabelizimm/cookiecutter-custompy/">sending repo</a> generates a cookiecutter template for a Python package, and then the <a href="https://github.com/isabelizimm/making-cookies/tree/dev-branch">receiving repo</a> is the output package. You don’t have to be familiar with <a href="https://cookiecutter.readthedocs.io/en/1.7.2/">cookiecutter templates</a> to understand this gist, but they’re worth a quick click if organization brings you joy.</p>
<p>Before running your chain reaction of actions, a few pieces need to be set up. The receiving repo cannot be empty, so I just initialized it with an empty README.md. The next part is probably the most difficult if you’re unfamiliar, which is <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">generating an SSH key, click here for instructions</a>. Once you’ve gone into the terminal and generated the key, add the PUBLIC KEY to your SENDING repo and the PRIVATE KEY to your RECEIVING repo.</p>
</section>
<section id="ready-action" class="level1">
<h1>Ready, ACTION!</h1>
<p>The GitHub Action that sets off this package creation is below, or you can see the <a href="https://github.com/isabelizimm/cookiecutter-custompy/blob/main/.github/workflows/gen_cookie.yml">action in the repo, for context</a>. <em>Note: there are difference between the code below and the code in the repo, these changes were made for clarity and should not impact performance.</em></p>
<pre><code># Creates cookie cutter and pushes to new repo
name: Generate Cookiecutter
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install requirements
        run: pip install cookiecutter
      - name: Make cookiecutter with default inputs
        run: cookiecutter --no-input .
      - name: Send to receiving repo
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: isabelizimm/making-cookies
          publish_branch: dev-branch
          publish_dir: ./my_new_package
          exclude_assets: ''</code></pre>
<p>Really, the most important part here is the <code>Send to receiving repo</code> step. You see here that your sender deploy key is being utilized and the external repository and branch is specified. This Action will normally exclude certain files (in particular, we need <code>.github/</code> from the template) on push, which is we have to manually set <code>exclude_assets: ' '</code> so all files are being pushed.</p>
<p>Once this action is running successfully, you will see a new branch, <code>dev-branch</code>, on the receiving repo, <code>making-cookies</code>. Congratulations! The hard part is finished.</p>
<p>The second set of actions is less magical. This template package has <a href="https://github.com/isabelizimm/making-cookies/tree/dev-branch/.github/workflows">built-in GitHub Actions</a> to jump-start running tests and building docs. This second set of actions runs on push to any branch named “dev-*”, so they automatically start after the initial push to the branch from the sending repo.</p>
<p>Hopefully this helps (or at least gives a starting point) others who are also exploring the capabilites of CI! Feel free to contact me if you have any suggestions or struggles. :)</p>
<p><em>cheers,</em> <em>iz</em></p>


</section>

 ]]></description>
  <category>git</category>
  <guid>https://isabelizimm.me/posts/2022-03-30_gha-making-gha/</guid>
  <pubDate>Wed, 30 Mar 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-03-30_gha-making-gha/cc.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cat detection with explainers</title>
  <link>https://isabelizimm.me/posts/2022-03-20_pet-image-detection/</link>
  <description><![CDATA[ 




<section id="pet-image-detection" class="level2">
<h2 class="anchored" data-anchor-id="pet-image-detection">Pet image detection</h2>
<p>The growing availability of big data has increased the benefits of using complex models, forcing data scientists to choose between accuracy and interpretability of a model’s output. Adding explainability methods to models that are not easily understood helps:</p>
<ul>
<li>Ensure transparency algorithmic decision-making</li>
<li>Identify potential bias in the training data</li>
<li>Give a deeper understanding of the process being modeled</li>
</ul>
<p>These methods are able to give insight into why your model generates specific outputs; explainability algorithms are especially useful in highly regulated industries (ie, pinpoint the attributes that caused someone to be denied/approved a home loan). We’ll demonstrate an <a href="https://homes.cs.washington.edu/~marcotcr/aaai18.pdf">anchor explainer</a> in this notebook to better understand why a generic image detection model is creating certain outputs using the <a href="https://github.com/SeldonIO/alibi">open-source library alibi</a>.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.applications.inception_v3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InceptionV3, decode_predictions</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.preprocessing.image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_img, img_to_array</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> alibi.explainers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnchorImage</span></code></pre></div>
</div>
<p>To begin, we load and format the photo into a machine readable array.</p>
<div id="cell-4" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2021-04-12T00:09:47.420259Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:47.407939Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> image_pipeline(image_name):  </span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Format custom picture</span></span>
<span id="cb2-4">    resized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_img(image_name, target_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>))</span>
<span id="cb2-5">    numpy_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_to_array(resized_image)</span>
<span id="cb2-6">    image_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(numpy_image, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-7">    </span>
<span id="cb2-8">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InceptionV3(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagenet'</span>)</span>
<span id="cb2-9">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(image_batch)</span>
<span id="cb2-10">    </span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Display results</span></span>
<span id="cb2-12">    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_predictions(preds, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-13">    plt.title(label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-14">    plt.imshow(resized_image)</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2021-04-12T00:09:52.393155Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:47.422350Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cat.jpg'</span></span>
<span id="cb3-2">image_pipeline(image_name)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The predict function returns the predictions via <a href="https://en.wikipedia.org/wiki/Softmax_function">Softmax</a>, which mean that the prediction can be translated as the probability that the image falls into one of the categories given in training. Even though we see this as a cat, the model gives a 100% probability that the image shows a pitcher. There are a few things to note here.</p>
<ol type="1">
<li>This is a photo I took of my own cat, so I can confidently know that the model has never seen the picture before. To a human eye, it is (hopefully) pretty obvious that the image is of a cat. However, oftentimes training data, especially images, does not accurately reflect photos that are taken by you or I. For example, the training photos may all have centered images in good lighting with nothing in the background, which is unrealistic for everyday images.</li>
<li>This is a Softmax output. The model only gives us the names of its best guesses, not how strong the prediction is. This is a subtle differentiation. The model believes that pitcher is definitely the <em>best</em> guess, but it could only be 1% certain in this prediction. To solve this, we could add new outcome metrics, or tweak the model.</li>
</ol>
<p>Before we do any of that though, it could be useful for us to better understand how the model is making this prediction. We’ll use something called an explainer to dive deeper.</p>
</section>
<section id="explainability" class="level2">
<h2 class="anchored" data-anchor-id="explainability">Explainability</h2>
<p>We will use a local version of the model to build an <a href="https://homes.cs.washington.edu/~marcotcr/aaai18.pdf">anchor</a> explainer. This will show us what parts of the photo the model used in order to give the “pitcher” prediction.</p>
<div id="cell-8" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2021-04-12T00:09:53.474355Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:53.378567Z&quot;}" data-code_folding="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> explainability_pipeline(image_name): </span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format custom picture</span></span>
<span id="cb4-4">    resized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_img(image_name, target_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>))</span>
<span id="cb4-5">    numpy_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_to_array(resized_image)</span>
<span id="cb4-6">    image_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(numpy_image, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-7">    </span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set hyperparameters</span></span>
<span id="cb4-9">    image_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-10">    segmentation_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slic'</span></span>
<span id="cb4-11">    kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_segments'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'compactness'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>}</span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load model</span></span>
<span id="cb4-14">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InceptionV3(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagenet'</span>)</span>
<span id="cb4-15">    </span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explainer, from alibi library</span></span>
<span id="cb4-17">    explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AnchorImage(model, image_shape, segmentation_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>segmentation_fn, </span>
<span id="cb4-18">                            segmentation_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kwargs, images_background<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-19">    </span>
<span id="cb4-20">    cat_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-21">    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.explain(cat_image, threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">                                    p_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, tau<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">    plt.imshow(explanation.anchor)</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2021-04-12T00:10:48.201668Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:53.477393Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">explainability_pipeline(image_name)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>skimage.measure.label's indexing starts from 0. In future version it will start from 1. To disable this warning, explicitely set the `start_label` parameter to 1.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/index_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It looks as though the model uses primarily the background to create this prediction, so it comes as no surprise that the classification is wildly incorrect. With this information in mind, data scientists may decide to go back and create a more robust exploration of the data and model. It may be the case that the training data of cats has only solid backgrounds, different lighting, different color/hair length cat, or some other feature that caused this image to not be identified correctly.</p>
<p>Explainers will not fix the model itself. However, they are useful tools for data scientists to build well-architected models by exposing bias in training data and giving transparency to black-box models.</p>
</section>
<section id="try-your-own-pets" class="level2">
<h2 class="anchored" data-anchor-id="try-your-own-pets">Try your own pets!</h2>
<p>Either download or git clone this <a href="https://github.com/isabelizimm/pet-image-detection.git">demo repo</a> to your local machine. Import your own photo to the <code>data</code> folder. Change <code>your-image-name</code> in the final cell (see below for example) to match your image’s name, and press run!</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">custom_image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/your-image-name.jpg'</span></span>
<span id="cb7-2">image_pipeline(custom_image_name)</span>
<span id="cb7-3">explainability_pipeline(custom_image_name)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2022-03-20_pet-image-detection/</guid>
  <pubDate>Sun, 20 Mar 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reading Time Calculator</title>
  <link>https://isabelizimm.me/posts/2025-01-27_audiobook-calculator/</link>
  <description><![CDATA[ 




<p>I am tired of googling “Reading time calculator” every time I want to do the (admittedly very simple) math to determine how long an audiobook will take at a certain speed. Plus, I’ve been interested in learning a bit more HTML-y things. Why not combine these two tasks into my own reading calculator?</p>
<details>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;!DOCTYPE</span> html<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">style</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-7">    body {</span>
<span id="cb1-8">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">Arial</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">sans-serif</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">margin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">    }</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.calculator</span> {</span>
<span id="cb1-12">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max-width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">margin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">padding</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">solid</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border-radius</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">box-shadow</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgba(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">165</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">    }</span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.calculator</span> input {</span>
<span id="cb1-20">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">%</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">margin-bottom</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">padding</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">solid</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#ccc</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border-radius</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-25">    }</span>
<span id="cb1-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.calculator</span> button {</span>
<span id="cb1-27">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">%</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">padding</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#CED5DA</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-31">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border-radius</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cursor</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">pointer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-34">    }</span>
<span id="cb1-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.calculator</span> button<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:hover</span> {</span>
<span id="cb1-36">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-37">    }</span>
<span id="cb1-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">style</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-39"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-40"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"calculator"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-42">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Book Length (Hours)<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-43">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-44"></span>
<span id="cb1-45">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minutes"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Book Length (Minutes)<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-46">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minutes"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Book Length (Seconds)<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-49">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-50"></span>
<span id="cb1-51">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Reading Speed<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">label</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-52">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">input</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-53"></span>
<span id="cb1-54">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> onclick</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"calculateTime()"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Go<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">button</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-55"></span>
<span id="cb1-56">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-57">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-58"></span>
<span id="cb1-59">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculateTime</span>() {</span>
<span id="cb1-61">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get inputs</span></span>
<span id="cb1-62">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">parseInt</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hours'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-63">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">parseInt</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minutes'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-64">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> seconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">parseInt</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seconds'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-65">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">parseFloat</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'speed'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-66"></span>
<span id="cb1-67">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert book length to total seconds</span></span>
<span id="cb1-68">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> totalSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-69"></span>
<span id="cb1-70">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate adjusted time</span></span>
<span id="cb1-71">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> adjustedSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> totalSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> speed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-72"></span>
<span id="cb1-73">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert back to hours, minutes, and seconds</span></span>
<span id="cb1-74">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> resultHours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(adjustedSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-75">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> resultMinutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>((adjustedSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-76">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> resultSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(adjustedSeconds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-77"></span>
<span id="cb1-78">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display result</span></span>
<span id="cb1-79">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> resultElement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getElementById</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'result'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-80">      resultElement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">textContent</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`Adjusted Reading Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>resultHours<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> hours, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>resultMinutes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> minutes, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>resultSeconds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds.`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-81">    }</span>
<span id="cb1-82">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-83"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">body</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-84"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">html</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</details>



  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .calculator {
      max-width: 450px;
      margin: 0 auto;
      padding: 40px;
      border: 4px solid rgb(233, 150, 205);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(165, 37, 122, 0.1);
    }
    .calculator input {
      width: 100%;
      margin-bottom: 16px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .calculator button {
      width: 100%;
      padding: 10px;
      background-color: #CED5DA;
      color:rgb(0, 0, 0);
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .calculator button:hover {
      background-color:rgb(233, 150, 205);
    }
  </style>


  <div class="calculator">
    <label for="hours">Book Length (Hours)</label>
    <input type="number" id="hours" value="0" min="0">

    <label for="minutes">Book Length (Minutes)</label>
    <input type="number" id="minutes" value="0" min="0">

    <label for="seconds">Book Length (Seconds)</label>
    <input type="number" id="seconds" value="0" min="0">

    <label for="speed">Reading Speed</label>
    <input type="number" id="speed" value="1.0" min="0.1" step="0.1">

    <button onclick="calculateTime()">Go</button>

    <div class="result" id="result"></div>
  </div>

  <script>
    function calculateTime() {
      // Get inputs
      const hours = parseInt(document.getElementById('hours').value) || 0;
      const minutes = parseInt(document.getElementById('minutes').value) || 0;
      const seconds = parseInt(document.getElementById('seconds').value) || 0;
      const speed = parseFloat(document.getElementById('speed').value) || 1.0;

      // Convert book length to total seconds
      const totalSeconds = (hours * 3600) + (minutes * 60) + seconds;

      // Calculate adjusted time
      const adjustedSeconds = totalSeconds / speed;

      // Convert back to hours, minutes, and seconds
      const resultHours = Math.floor(adjustedSeconds / 3600);
      const resultMinutes = Math.floor((adjustedSeconds % 3600) / 60);
      const resultSeconds = Math.round(adjustedSeconds % 60);

      // Display result
      const resultElement = document.getElementById('result');
      resultElement.textContent = `Adjusted Reading Time: ${resultHours} hours, ${resultMinutes} minutes, ${resultSeconds} seconds.`;
    }
  </script>





 ]]></description>
  <category>fun</category>
  <guid>https://isabelizimm.me/posts/2025-01-27_audiobook-calculator/</guid>
  <pubDate>Mon, 10 Feb 2025 22:14:43 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2025-01-27_audiobook-calculator/book.png" medium="image" type="image/png" height="192" width="144"/>
</item>
</channel>
</rss>
