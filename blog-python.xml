<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>isabel zimmerman</title>
<link>https://isabelizimm.me/blog.html#category=python</link>
<atom:link href="https://isabelizimm.me/blog-python.xml" rel="self" type="application/rss+xml"/>
<description>Isabel Zimmerman&#39;s personal blog</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Tue, 25 Jun 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Plotnine plot contest</title>
  <link>https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/</link>
  <description><![CDATA[ 




<p><a href="https://plotnine.org/">Plotnine</a> is running a plot contest! <a href="https://github.com/has2k1/plotnine/discussions/788">And it is not too late to enter</a>, submissions close July 12!</p>
<p>For my submission<sup>1</sup>, I’ll start with reading in <a href="">cheese data from TidyTuesday</a>, as well as a csv of longitudes and latitudes of different countries.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geodatasets</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotnine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">cheese <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-06-04/cheeses.csv"</span></span>
<span id="cb1-11">)</span>
<span id="cb1-12">country_lat_long <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./world_country_and_usa_states_latitude_and_longitude_values.csv"</span></span>
<span id="cb1-14">)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>]]</span></code></pre></div>
</div>
<p>Next, some data manipulation to set us up with tidy data to plot.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb2-2">cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb2-3">cheese <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>).explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>)</span>
<span id="cb2-4">mode_milk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>].agg(pd.Series.mode).reset_index()</span>
<span id="cb2-5">country_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(pat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>).explode().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip().value_counts().reset_index()</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">cheese_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> country_value.merge(country_lat_long, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>)</span>
<span id="cb3-2">cheese_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese_plot.merge(mode_milk, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>).explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'milk'</span>)</span>
<span id="cb3-3">top_countries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cheese_plot.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).replace([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United Kingdom"</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.K."</span>]).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>We also will use <a href="https://geopandas.org/en/v1.0.0/index.html"><code>geopandas</code></a> in order to generate the map itself.</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">geodatasets.fetch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"naturalearth land"</span>)</span>
<span id="cb4-2">world_lowres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geopandas.read_file(</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/geopandas/geopandas/raw/v0.9.0/geopandas/datasets/naturalearth_lowres/naturalearth_lowres.shp"</span></span>
<span id="cb4-4">)</span>
<span id="cb4-5">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geopandas.read_file(geodatasets.get_path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"naturalearth land"</span>))</span></code></pre></div>
</div>
<p>Finally, let’s use plotnine to put it all together! The main pieces in play are four <code>geoms_</code> and then some extra layers to make the plot more readable. A <code>geom_map</code> to generate the map, <code>geom_point</code> to place each circle depicting number and type of cheeses, and two <code>geom_text</code> elements for the country name and number of cheeses. The <code>scale_size</code> edits the size of the points in <code>geom_point</code> and <code>scale_colour_brewer</code> edits the colors of these points. Finally, the theme is a combination of <code>theme_void</code> and custom <code>theme</code> and <code>guides</code> elements.</p>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">(</span>
<span id="cb5-2">    ggplot()</span>
<span id="cb5-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_map(world_lowres, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#474c53"</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d0d0d0"</span>, stroke<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)</span>
<span id="cb5-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_point(</span>
<span id="cb5-5">        data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cheese_plot,</span>
<span id="cb5-6">        mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"milk"</span>),</span>
<span id="cb5-7">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,</span>
<span id="cb5-8">    )</span>
<span id="cb5-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_text(</span>
<span id="cb5-10">        top_countries,</span>
<span id="cb5-11">        aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>),</span>
<span id="cb5-12">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb5-13">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb5-14">    )</span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> geom_text(</span>
<span id="cb5-16">        top_countries,</span>
<span id="cb5-17">        aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>),</span>
<span id="cb5-18">        nudge_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb5-19">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb5-20">    )</span>
<span id="cb5-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> labs(</span>
<span id="cb5-22">        title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Say Cheese: A World Tour"</span>,</span>
<span id="cb5-23">        subtitle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This map shows the number of cheese types per country and the most common milk used. This is nacho average cheese map!"</span>,</span>
<span id="cb5-24">        caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data from cheese.com via the TidyTuesday project"</span>,</span>
<span id="cb5-25">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most common milk type used"</span>,</span>
<span id="cb5-26">    )</span>
<span id="cb5-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme_void()</span>
<span id="cb5-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scale_size(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>), guide<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb5-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scale_colour_brewer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accent"</span>)</span>
<span id="cb5-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theme(</span>
<span id="cb5-31">        figure_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb5-32">        legend_text_legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb5-33">        legend_direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>,</span>
<span id="cb5-34">        legend_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb5-35">        legend_position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>),</span>
<span id="cb5-36">        plot_title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fantasy"</span>),</span>
<span id="cb5-37">        plot_subtitle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb5-38">        plot_caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>element_text(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb5-39">    )</span>
<span id="cb5-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> guides(colour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>guide_legend(override_aes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}))</span>
<span id="cb5-41">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/isabelzimmerman/.pyenv/versions/3.11.4/envs/docker/lib/python3.11/site-packages/plotnine/layer.py:364: PlotnineWarning: geom_point : Removed 11 rows containing missing values.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/index_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If you’re interested in entering the plot contest, but aren’t sure what data to use, here are a few options that look like a lot of fun:</p>
<ul>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-05-30/readme.md">Verified oldest people</a></li>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-02-13/readme.md">Valentine’s Day consumer data</a></li>
<li><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-05-14/readme.md">The Great American Coffee Taste Test</a></li>
</ul>
<p>Hope to see some of your plots!</p>
<p><em>cheers, isabel</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Truthfully, I made this plot because I’m a data nerd with a weird idea of fun. Since I’m an employee of the company Posit (who is sponsoring this contest), I cannot actually enter. <em>But you can!</em> Prizes include fun swag, subscriptions to services to host your portfolio, and the priceless bragging rights of being a open source plotting champion 🏆↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/</guid>
  <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2024-06-24_cheese-plotnine/output.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Pyenv in RStudio</title>
  <link>https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/</link>
  <description><![CDATA[ 




<p>I am a chronic destroyer of Python environments. My favorite tools right now are <a href="https://github.com/pyenv/pyenv">pyenv</a> and <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>, which keep me mostly out of trouble, but there is some extra legwork to get them set up with RStudio IDE.</p>
<p>I usually start by checking what Python is being used by going to the RStudio console and running:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">py_config</span>()</span></code></pre></div>
<p>This gives me:</p>
<pre><code>python:         /usr/bin/python3
libpython:      /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/config-3.8-darwin/libpython3.8.dylib
pythonhome:     /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8:/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8
version:        3.8.9 (default, Aug  3 2021, 19:21:54)  [Clang 13.0.0 (clang-1300.0.29.3)]
numpy:           [NOT FOUND]</code></pre>
<p>which is nice, since at least some sort of Python is THERE, but I want to follow the Golden Rule: <strong>don’t touch the system Python</strong>.</p>
<p>Time to do some environment gymnastics. My first move is to allow <code>pyenv</code> to share its environment, which is <a href="https://rstudio.github.io/reticulate/articles/versions.html#locating-python">required to use envs with <code>reticulate</code></a>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span> PYTHON_CONFIGURE_OPTS=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--enable-shared"</span> pyenv install 3.9.4</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> virtualenv 3.9.4 newenv</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you skip this step, you will get an error similar to:</p>
<pre><code>Error: '/Users/isabelzimmerman/.pyenv/versions/3.9.11/envs/pydemo/bin/python' was not 
built with a shared library. reticulate can only bind to copies of Python 
built with '--enable-shared'.</code></pre>
</div>
</div>
<p>Next, we’re going to restart the R session, and try to just add this new Python environment in there. The key here is RESTART R SESSION (on macOS, this is commmand+shift+0) and then DON’T TRY TO RUN ANYTHING IN PYTHON BEFORE THESE NEXT FEW COMMANDS. If you “just try to run one thing to see if {insert ridiculous Python MultiEnvironmentVerse of Madness strategy} worked,” you will end up in an endless loop of setting environment variables that are ignored since they are already initialized (this sentence is hard-won for me). Let’s try to use reticulate to set Python first.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_python</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">required =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>gives us:</p>
<pre><code>Warning message:
The request to `use_python("/Users/isabelzimmerman/.pyenv/versions/3.9.11/envs/newenv/bin/python")` 
will be ignored because the environment variable RETICULATE_PYTHON is set to "/usr/bin/python3" </code></pre>
<p>This is a helpful warning that tells us we need to set up the RETICULATE_PYTHON environment variable. We can do this by:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">RETICULATE_PYTHON=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python'</span>)</span></code></pre></div>
<p>and then check to see if it worked since we have pretty strong trust issues.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RETICULATE_PYTHON"</span>)</span></code></pre></div>
<pre><code>[1] "/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python"</code></pre>
<p>Promising! Let’s check out the <code>reticulate::py_config()</code> now.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">py_config</span>()</span></code></pre></div>
<pre><code>python:         /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python
libpython:      /Users/isabelzimmerman/.pyenv/versions/3.9.4/lib/libpython3.9.dylib
pythonhome:     /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv:/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv
version:        3.9.4 (default, May 31 2022, 09:32:34)  [Clang 13.0.0 (clang-1300.0.29.3)]
numpy:          /Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/lib/python3.9/site-packages/numpy
numpy_version:  1.23.1

NOTE: Python version was forced by RETICULATE_PYTHON</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If this doesn’t work, I would tell you to go digging for your RETICULATE_PYTHON environment variable. Some places to check out:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> ~/.Renviron</span></code></pre></div>
<p>should open a file that has environment variables, specifically our elusive RETICULATE_PYTHON. We can update that file to look like:</p>
<pre><code>export RETICULATE_PYTHON=/Users/isabelzimmerman/.pyenv/versions/3.9.4/envs/newenv/bin/python</code></pre>
</div>
</div>
<p>IT WORKED! Time to run all the Python I can. I’m fully open to better workflows if you have them, but for now, this gets me on my way when I feel the despair of another broken Python environment.</p>
<p>Also, S/O to <a href="https://firas.io/post/pyenv_rstudio/">Firas Sadiyah’s blog post on pyenv + RStudio</a> which has helped me many a time to get on the right track!</p>



 ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/</guid>
  <pubDate>Mon, 19 Sep 2022 00:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-09-19_pyenv-in-rstudio/pyenv.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cat detection with explainers</title>
  <link>https://isabelizimm.me/posts/2022-03-20_pet-image-detection/</link>
  <description><![CDATA[ 




<section id="pet-image-detection" class="level2">
<h2 class="anchored" data-anchor-id="pet-image-detection">Pet image detection</h2>
<p>The growing availability of big data has increased the benefits of using complex models, forcing data scientists to choose between accuracy and interpretability of a model’s output. Adding explainability methods to models that are not easily understood helps:</p>
<ul>
<li>Ensure transparency algorithmic decision-making</li>
<li>Identify potential bias in the training data</li>
<li>Give a deeper understanding of the process being modeled</li>
</ul>
<p>These methods are able to give insight into why your model generates specific outputs; explainability algorithms are especially useful in highly regulated industries (ie, pinpoint the attributes that caused someone to be denied/approved a home loan). We’ll demonstrate an <a href="https://homes.cs.washington.edu/~marcotcr/aaai18.pdf">anchor explainer</a> in this notebook to better understand why a generic image detection model is creating certain outputs using the <a href="https://github.com/SeldonIO/alibi">open-source library alibi</a>.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.applications.inception_v3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InceptionV3, decode_predictions</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.preprocessing.image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_img, img_to_array</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> alibi.explainers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnchorImage</span></code></pre></div>
</div>
<p>To begin, we load and format the photo into a machine readable array.</p>
<div id="cell-4" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2021-04-12T00:09:47.420259Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:47.407939Z&quot;}}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> image_pipeline(image_name):  </span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Format custom picture</span></span>
<span id="cb2-4">    resized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_img(image_name, target_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>))</span>
<span id="cb2-5">    numpy_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_to_array(resized_image)</span>
<span id="cb2-6">    image_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(numpy_image, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-7">    </span>
<span id="cb2-8">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InceptionV3(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagenet'</span>)</span>
<span id="cb2-9">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(image_batch)</span>
<span id="cb2-10">    </span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Display results</span></span>
<span id="cb2-12">    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_predictions(preds, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-13">    plt.title(label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-14">    plt.imshow(resized_image)</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2021-04-12T00:09:52.393155Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:47.422350Z&quot;}}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cat.jpg'</span></span>
<span id="cb3-2">image_pipeline(image_name)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The predict function returns the predictions via <a href="https://en.wikipedia.org/wiki/Softmax_function">Softmax</a>, which mean that the prediction can be translated as the probability that the image falls into one of the categories given in training. Even though we see this as a cat, the model gives a 100% probability that the image shows a pitcher. There are a few things to note here.</p>
<ol type="1">
<li>This is a photo I took of my own cat, so I can confidently know that the model has never seen the picture before. To a human eye, it is (hopefully) pretty obvious that the image is of a cat. However, oftentimes training data, especially images, does not accurately reflect photos that are taken by you or I. For example, the training photos may all have centered images in good lighting with nothing in the background, which is unrealistic for everyday images.</li>
<li>This is a Softmax output. The model only gives us the names of its best guesses, not how strong the prediction is. This is a subtle differentiation. The model believes that pitcher is definitely the <em>best</em> guess, but it could only be 1% certain in this prediction. To solve this, we could add new outcome metrics, or tweak the model.</li>
</ol>
<p>Before we do any of that though, it could be useful for us to better understand how the model is making this prediction. We’ll use something called an explainer to dive deeper.</p>
</section>
<section id="explainability" class="level2">
<h2 class="anchored" data-anchor-id="explainability">Explainability</h2>
<p>We will use a local version of the model to build an <a href="https://homes.cs.washington.edu/~marcotcr/aaai18.pdf">anchor</a> explainer. This will show us what parts of the photo the model used in order to give the “pitcher” prediction.</p>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2021-04-12T00:09:53.474355Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:53.378567Z&quot;}}" data-code_folding="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> explainability_pipeline(image_name): </span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format custom picture</span></span>
<span id="cb4-4">    resized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_img(image_name, target_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>))</span>
<span id="cb4-5">    numpy_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_to_array(resized_image)</span>
<span id="cb4-6">    image_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(numpy_image, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-7">    </span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set hyperparameters</span></span>
<span id="cb4-9">    image_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">299</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-10">    segmentation_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slic'</span></span>
<span id="cb4-11">    kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_segments'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'compactness'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>}</span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load model</span></span>
<span id="cb4-14">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InceptionV3(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagenet'</span>)</span>
<span id="cb4-15">    </span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explainer, from alibi library</span></span>
<span id="cb4-17">    explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AnchorImage(model, image_shape, segmentation_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>segmentation_fn, </span>
<span id="cb4-18">                            segmentation_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kwargs, images_background<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-19">    </span>
<span id="cb4-20">    cat_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-21">    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.explain(cat_image, threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-22">                                    p_sample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, tau<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">    plt.imshow(explanation.anchor)</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2021-04-12T00:10:48.201668Z&quot;,&quot;start_time&quot;:&quot;2021-04-12T00:09:53.477393Z&quot;}}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">explainability_pipeline(image_name)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>skimage.measure.label's indexing starts from 0. In future version it will start from 1. To disable this warning, explicitely set the `start_label` parameter to 1.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/index_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It looks as though the model uses primarily the background to create this prediction, so it comes as no surprise that the classification is wildly incorrect. With this information in mind, data scientists may decide to go back and create a more robust exploration of the data and model. It may be the case that the training data of cats has only solid backgrounds, different lighting, different color/hair length cat, or some other feature that caused this image to not be identified correctly.</p>
<p>Explainers will not fix the model itself. However, they are useful tools for data scientists to build well-architected models by exposing bias in training data and giving transparency to black-box models.</p>
</section>
<section id="try-your-own-pets" class="level2">
<h2 class="anchored" data-anchor-id="try-your-own-pets">Try your own pets!</h2>
<p>Either download or git clone this <a href="https://github.com/isabelizimm/pet-image-detection.git">demo repo</a> to your local machine. Import your own photo to the <code>data</code> folder. Change <code>your-image-name</code> in the final cell (see below for example) to match your image’s name, and press run!</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">custom_image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/your-image-name.jpg'</span></span>
<span id="cb7-2">image_pipeline(custom_image_name)</span>
<span id="cb7-3">explainability_pipeline(custom_image_name)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://isabelizimm.me/posts/2022-03-20_pet-image-detection/</guid>
  <pubDate>Sun, 20 Mar 2022 00:00:00 GMT</pubDate>
  <media:content url="https://isabelizimm.me/posts/2022-03-20_pet-image-detection/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
